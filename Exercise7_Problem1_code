#Using Katelyn's pseudo code, writing code for Problem 1
#Pseudo-code = Katelyn
#Code = Hannah
#Pseudo code Part 1
#Pseudo-code = Katelyn
#Code = Hannah

#import packages (os, numpy, pandas, plotnine (from plotnine import *))
#open file for Lecture11.fasta
#set lists for sequence length, GC content
#calculate sequence lengths, append to list
#calculate GC content, append to list
#possibly makes lists into dataframe? #not sure #may be able to just plot from list variable?
#use ggplot to make histogram, set x axis as sequence length and GC content for each histogram respectively
import numpy
import pandas
from plotnine import *

#open file for Lecture11.fasta
DNAseq=open("Lecture11.fasta","r")

#set lists for sequence length, GC content
sequenceLength=[]
GCcontent=[]

#calculate sequence lengths, append to list
for line in DNAseq:
    line=line.strip()
    if '>' in line:
        seqLength=float(len(line)) #makes sequence length a number with a decimal
        sequenceLength.append(seqLength) #adds sequence length to the list
    else: #go to next line
    
#calculate GC content, append to list
for line in DNAseq:
    line=line.strip()
    if '>' in line:
        Gnumber=line.count("G") #count number of G in sequence
        Cnumber=line.count("C") #count number of C in sequence
        GCpercent=((Gnumber+Cnumber)/seqLength) #calculate the GC content
        GCcontent.append(GCpercent) #adds GC content to list
    else: #go to next line  

#close file
DNAseq.close()

#combine into a single data frame
seqDF = pandas.DataFrame(list(zip(sequenceLength,percentGC)),columns=['sequenceLength','percentGC'])


#use ggplot to make histogram, set x axis as sequence length 
a=ggplot(seqDF,aes(x="sequenceLength"))
a+geom_histogram()+theme_classic()

#use ggplot to make histrogram, set x axis as GC content
b=ggplot(seqDF,aes(x="percentGC")
b+geom_histogram()+theme_classic()