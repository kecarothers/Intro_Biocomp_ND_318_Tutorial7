#Using Katelyn's pseudo code, writing code for Problem 1
#Pseudo-code = Katelyn
#Code = Hannah

#import packages (os, numpy, pandas, plotnine (from plotnine import *))
import numpy
import pandas
import scipy
import matplotlib.pyplot

#open file for Lecture11.fasta
DNAseq=open("Lecture11.fasta","r")

#set lists for sequence length, GC content
sequenceID=[]
sequenceLength=[]
GCcontent=[]

#calculate sequence lengths and GC content, append to list
for line in DNAseq:
    line=line.strip()
    if '>' in line:
        sequenceID.append(line[1:])
    else:    
        seqLength=float(len(line)) #makes sequence length a number with a decimal
        sequenceLength.append(seqLength) #adds sequence length to the list
        Gnumber=line.count("G") #count number of G in sequence
        Cnumber=line.count("C") #count number of C in sequence
        GCpercent=(((Gnumber+Cnumber)/seqLength)*100) #calculate the GC content
        GCcontent.append(GCpercent) #adds GC content to list

#close file
DNAseq.close()

#make data frames
seqDF_length = pandas.DataFrame(list(zip(sequenceID,sequenceLength)),columns=['sequenceID','sequenceLength'])
seqDF_GC = pandas.DataFrame(list(zip(sequenceID,GCcontent)),columns=['sequenceID','GCpercent'])

#use ggplot to make histogram, set x axis as sequence length 
a=ggplot(seqDF_length,aes(x="sequenceLength"))
a+geom_histogram()+theme_classic()

#use ggplot to make histrogram, set x axis as GC content
b=ggplot(seqDF_GC,aes(x="GCpercent"))
b+geom_histogram()+theme_classic()

